/* ---------------------------------------------------- */
/*  Generated by Enterprise Architect Version 13.5 		*/
/*  Created On : 07-oct.-2022 15:25:50 				*/
/*  DBMS       : PostgreSQL 						*/
/* ---------------------------------------------------- */

/* Drop Tables */

DROP TABLE IF EXISTS Cargo CASCADE
;

DROP TABLE IF EXISTS Egreso CASCADE
;

DROP TABLE IF EXISTS Empleado CASCADE
;

DROP TABLE IF EXISTS Grupo_terapeitico CASCADE
;

DROP TABLE IF EXISTS Ingreso CASCADE
;

DROP TABLE IF EXISTS Laboratorio CASCADE
;

DROP TABLE IF EXISTS Lote CASCADE
;

DROP TABLE IF EXISTS Medicamento CASCADE
;

DROP TABLE IF EXISTS Presentacion CASCADE
;

/* Create Tables */

CREATE TABLE Cargo
(
	CargoID SERIAL NOT NULL,
	Nombre varchar(50) NOT  NULL
)
;

CREATE TABLE Egreso
(
	EgresoID SERIAL NOT NULL,
	Fecha date NOT NULL,
	Descripcion varchar(100) NOT NULL
)
;

CREATE TABLE Empleado
(
	EmpleadoID SERIAL NOT NULL,
	CargoID integer NULL,
	CI varchar(50) NOT NULL,
	NombreC varchar(50) NOT NULL,
	ApellidoP varchar(50) NOT NULL,
	ApelledoM varchar(50) NOT NULL,
	Correo varchar(50) NOT NULL,
	Telefono varchar(50) NOT NULL,
	Usuario varchar(50) NOT NULL,
	Contrasenha varchar(100) NOT NULL
)
;

CREATE TABLE Grupo_terapeitico
(
	Grupo_terapeiticoID SERIAL NOT NULL,
	Nombre varchar(50) NOT NULL
)
;

CREATE TABLE Ingreso
(
	IngresoID SERIAL NOT NULL,
	EmpleadoID integer NOT NULL,
	Fecha date NOT NULL,
	Hora varchar(50)NOT NULL
)
;

CREATE TABLE Laboratorio
(
	LaboratorioID SERIAL NOT NULL,
	Nombre varchar(50) NOT NULL,
	Correo varchar(50) NOT NULL,
	Telefono varchar(50) NULL,
	Direccion varchar(100) NULL
)
;

CREATE TABLE Lote
(
	LoteID SERIAL NOT NULL,
	IngresoID integer NOT NULL,
	Fecha_Vencimiento varchar(50) NOT NULL,
	MedicamentoID integer NULL,
	Fecha_Produccion varchar(50) NOT NULL,
	LaboratorioID integer NULL
)
;

CREATE TABLE Medicamento
(
	MedicamentoID SERIAL NOT NULL,
	Nombre_Producto VARCHAR (50) NOT NULL,
	Productoid VARCHAR (50) NOT NULL,
	Composicion varchar(100) NULL,
	Grupo_terapeiticoID integer NULL,
	Dosificacion varchar(100) NULL,
	Indicacion varchar(100) NULL,
	Contradicion varchar(100) NULL,
	PresentacionID integer NULL
)
;

CREATE TABLE Presentacion
(
	PresentacionID SERIAL NOT NULL,
	tipo varchar(100) NOT NULL
)
;



/* Create Primary Keys, Indexes, Uniques, Checks */

ALTER TABLE Cargo ADD CONSTRAINT PK_Cargo
	PRIMARY KEY (CargoID)
;

ALTER TABLE Egreso ADD CONSTRAINT PK_Egreso
	PRIMARY KEY (EgresoID)
;

ALTER TABLE Empleado ADD CONSTRAINT PK_Empleado
	PRIMARY KEY (EmpleadoID)
;

ALTER TABLE Grupo_terapeitico ADD CONSTRAINT PK_Grupo_terapeitico
	PRIMARY KEY (Grupo_terapeiticoID)
;

ALTER TABLE Ingreso ADD CONSTRAINT PK_Ingreso
	PRIMARY KEY (IngresoID)
;

ALTER TABLE Laboratorio ADD CONSTRAINT PK_Laboratorio
	PRIMARY KEY (LaboratorioID)
;

ALTER TABLE Lote ADD CONSTRAINT PK_Lote
	PRIMARY KEY (LoteID)
;

ALTER TABLE Medicamento ADD CONSTRAINT PK_Medicamento
	PRIMARY KEY (MedicamentoID)
;

ALTER TABLE Presentacion ADD CONSTRAINT PK_Presentacion
	PRIMARY KEY (PresentacionID)
;

/* Create Foreign Key Constraints */

ALTER TABLE Empleado ADD CONSTRAINT FK_Empleado_Cargo
	FOREIGN KEY (CargoID) REFERENCES Cargo (CargoID) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Ingreso ADD CONSTRAINT FK_Ingreso_Empleado
	FOREIGN KEY (EmpleadoID) REFERENCES Empleado (EmpleadoID) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Lote ADD CONSTRAINT FK_Lote_Laboratorio
	FOREIGN KEY (LaboratorioID) REFERENCES Laboratorio (LaboratorioID) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Lote ADD CONSTRAINT FK_Lote_Ingreso
	FOREIGN KEY (IngresoID) REFERENCES Ingreso (IngresoID) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Lote ADD CONSTRAINT FK_Lote_Medicamento
	FOREIGN KEY (MedicamentoID) REFERENCES Medicamento (MedicamentoID) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Medicamento ADD CONSTRAINT FK_Medicamento_Presentacion
	FOREIGN KEY (PresentacionID) REFERENCES Presentacion (PresentacionID) ON DELETE No Action ON UPDATE No Action
;

ALTER TABLE Medicamento ADD CONSTRAINT FK_Medicamento_Grupo_terapeitico
	FOREIGN KEY (Grupo_terapeiticoID) REFERENCES Grupo_terapeitico (Grupo_terapeiticoID) ON DELETE No Action ON UPDATE No Action
;
